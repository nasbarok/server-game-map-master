package com.airsoft.gamemapmaster.controller;

import com.airsoft.gamemapmaster.model.ConnectedPlayer;
import com.airsoft.gamemapmaster.model.GameMap;
import com.airsoft.gamemapmaster.model.Team;
import com.airsoft.gamemapmaster.model.User;
import com.airsoft.gamemapmaster.service.ConnectedPlayerService;
import com.airsoft.gamemapmaster.service.GameMapService;
import com.airsoft.gamemapmaster.service.TeamService;
import com.airsoft.gamemapmaster.service.UserService;
import com.airsoft.gamemapmaster.websocket.WebSocketMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/maps")
public class PlayerConnectionController {
    private static final Logger logger = LoggerFactory.getLogger(PlayerConnectionController.class);

    @Autowired
    private ConnectedPlayerService connectedPlayerService;

    @Autowired
    private UserService userService;

    @Autowired
    private GameMapService gameMapService;

    @Autowired
    private TeamService teamService;
    @Autowired
    private SimpMessagingTemplate messagingTemplate;
    /**
     * Endpoint pour qu'un joueur rejoigne une carte
     */
    @PostMapping("/{mapId}/join")
    public ResponseEntity<?> joinMap(@PathVariable("mapId") Long mapId,
                                     @RequestParam(value = "teamId", required = false) Long teamId,
                                     Authentication authentication) {
        String username = authentication.getName();
        Optional<User> user = userService.findByUsername(username);

        if (user.isEmpty()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Utilisateur non trouv√©");
        }

        // V√©rifier si la carte existe
        if (gameMapService.findById(mapId).isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Carte non trouv√©e");
        }

        // V√©rifier si le joueur est d√©j√† connect√© √† cette carte
        if (connectedPlayerService.isPlayerConnectedToMap(mapId, user.get().getId())) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Vous √™tes d√©j√† connect√© √† cette carte");
        }

        ConnectedPlayer connectedPlayer = connectedPlayerService.connectPlayerToMap(mapId, user.get().getId(), teamId);

        if (connectedPlayer == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Impossible de rejoindre la carte");
        }

        return ResponseEntity.status(HttpStatus.CREATED).body(connectedPlayer);
    }

    /**
     * Endpoint pour qu'un joueur quitte une carte
     */
    @PostMapping("/{mapId}/leave")
    public ResponseEntity<?> leaveMap(@PathVariable("mapId") Long mapId, Authentication authentication) {
        String username = authentication.getName();
        Optional<User> user = userService.findByUsername(username);

        if (user.isEmpty()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Utilisateur non trouv√©");
        }

        boolean disconnected = connectedPlayerService.disconnectPlayerFromMap(mapId, user.get().getId());

        if (!disconnected) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Vous n'√™tes pas connect√© √† cette carte");
        }

        return ResponseEntity.ok(Map.of("message", "Vous avez quitt√© la carte avec succ√®s"));
    }

    /**
     * Endpoint pour lister tous les joueurs connect√©s √† une carte
     */
    @GetMapping("/{mapId}/players")
    public ResponseEntity<?> getConnectedPlayers(@PathVariable("mapId") Long mapId) {
        // V√©rifier si la carte existe
        if (gameMapService.findById(mapId).isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Carte non trouv√©e");
        }

        List<ConnectedPlayer> connectedPlayers = connectedPlayerService.getConnectedPlayersByMapId(mapId);

        return ResponseEntity.ok(connectedPlayers);
    }

    /**
     * Endpoint pour d√©connecter tous les joueurs d'une carte (r√©serv√© au propri√©taire de la carte)
     */
    @PostMapping("/{mapId}/close")
    public ResponseEntity<?> closeMap(@PathVariable("mapId") Long mapId, Authentication authentication) {
        String username = authentication.getName();
        Optional<User> user = userService.findByUsername(username);

        if (user.isEmpty()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Utilisateur non trouv√©");
        }

        // V√©rifier si l'utilisateur est le propri√©taire de la carte
        return gameMapService.findById(mapId)
                .map(gameMap -> {
                    if (!gameMap.getOwner().getId().equals(user.get().getId())) {
                        return ResponseEntity.status(HttpStatus.FORBIDDEN)
                                .body("Vous n'√™tes pas autoris√© √† fermer cette carte");
                    }

                    int disconnectedCount = connectedPlayerService.disconnectAllPlayersFromMap(mapId);

                    return ResponseEntity.ok(Map.of(
                            "message", "Carte ferm√©e avec succ√®s",
                            "disconnectedPlayers", disconnectedCount
                    ));
                })
                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).body("Carte non trouv√©e"));
    }

    /**
     * Endpoint pour assigner un joueur √† une √©quipe
     */
    @PostMapping("/{mapId}/players/{userId}/team/{teamId}")
    public ResponseEntity<?> assignPlayerToTeam(@PathVariable("mapId") Long mapId,
                                                @PathVariable("userId") Long userId,
                                                @PathVariable("teamId") Long teamId,
                                                Authentication authentication) {
        String username = authentication.getName();
        Optional<User> currentUser = userService.findByUsername(username);

        // üîê V√©rification utilisateur
        if (currentUser.isEmpty()) {
            logger.warn("‚ùå Utilisateur non trouv√© pour le token JWT : {}", username);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Utilisateur non trouv√©");
        }

        Long ownerId = currentUser.get().getId();
        logger.info("üßæ Utilisateur '{}' (ID: {}) tente d'assigner le joueur {} √† l'√©quipe {} sur la carte {}",
                username, ownerId, userId, teamId, mapId);

        // üìç V√©rification que la carte existe
        Optional<GameMap> optionalMap = gameMapService.findById(mapId);
        if (optionalMap.isEmpty()) {
            logger.warn("‚ùå Carte introuvable : ID={}", mapId);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Carte non trouv√©e");
        }

        GameMap gameMap = optionalMap.get();

        // üîí V√©rification que l'utilisateur est le propri√©taire
        if (!gameMap.getOwner().getId().equals(ownerId)) {
            logger.warn("‚ùå Acc√®s refus√© : utilisateur {} (ID: {}) n'est pas le propri√©taire de la carte {}", username, ownerId, mapId);
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Vous n'√™tes pas autoris√© √† g√©rer cette carte");
        }

        // üîç V√©rification que le joueur est bien connect√© √† cette carte
        Optional<ConnectedPlayer> connectedPlayerOpt =
                connectedPlayerService.getConnectedPlayerByUserAndMap(userId, mapId);

        if (connectedPlayerOpt.isEmpty()) {
            logger.warn("‚ùå Joueur non connect√© √† la carte : userId={}, mapId={}", userId, mapId);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Joueur non connect√© √† cette carte");
        }

        // üß™ V√©rification que l‚Äô√©quipe existe
        Optional<Team> teamOpt = teamService.findById(teamId);
        if (teamOpt.isEmpty()) {
            logger.warn("‚ùå √âquipe introuvable : ID={}", teamId);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("√âquipe non trouv√©e");
        }

        // ‚úÖ Affectation
        ConnectedPlayer player = connectedPlayerOpt.get();
        player.setTeam(teamOpt.get());
        connectedPlayerService.save(player);

        // Apr√®s l'assignation r√©ussie
        Optional<ConnectedPlayer> connectedPlayer = connectedPlayerService.save(player);

        // Envoyer une notification WebSocket
        WebSocketMessage teamUpdateMessage = new WebSocketMessage(
                "TEAM_UPDATE",
                Map.of(
                        "mapId", mapId,
                        "userId", userId,
                        "teamId", teamId,
                        "teamName", teamOpt.get().getName(),
                        "action", "ASSIGN_PLAYER"
                ),
                authentication.getName(),
                System.currentTimeMillis()
        );

        messagingTemplate.convertAndSend("/topic/map/" + mapId, teamUpdateMessage);

        // Retourner le joueur connect√© avec toutes les informations √† jour
        return ResponseEntity.ok(connectedPlayer);
    }

}
